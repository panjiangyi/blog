let loiter=new Object();
/* loiter.js by Scott */ ! function(a) {
	var b = {
		WIDTH: window.innerWidth,
		HEIGHT: window.innerHeight,
		POINT: 17,
		FPS: 60,
		lineColor: "rgba(0,0,0,.02)",
		lineWidth: 1,
		circleColor: "rgba(0,0,0,.05)",
		canvas: document.getElementById("loiter"),
		mode: "impact",
		circleArr: [],
		context: {},
		start: function(a) {
			var b = this;
			a && (b.WIDTH = a.width ? a.width : b.WIDTH, b.HEIGHT = a.height ? a.height : b.HEIGHT, b.POINT = a.num ? a.num : b.POINT, b.canvas = a.container ? a.container : b.canvas, b.FPS = a.FPS ? a.FPS : b.FPS, b.mode = a.mode ? a.mode : b.mode), "impact" != b.mode && "through" != b.mode && (b.mode = "impact"), b.FPS > 1e3 && (b.FPS = 1e3), b.canvas.width = b.WIDTH, b.canvas.height = b.HEIGHT, b.context = b.canvas.getContext("2d"), b.context.strokeStyle = b.lineColor, b.context.strokeWidth = b.lineWidth, b.context.fillStyle = b.circleColor, a && (b.context.fillStyle = a.circleColor ? a.circleColor : b.circleColor), b.init(), setInterval(function() {
				for (var a = 0; a < b.POINT; a++) {
					var c = b.circleArr[a];
					c.x += c.moveX, c.y += c.moveY, "impact" == b.mode ? (c.x > b.WIDTH - c.r ? (c.x = b.WIDTH - c.r, c.moveX = -c.moveX) : c.x < c.r && (c.x = c.r, c.moveX = -c.moveX), c.y > b.HEIGHT - c.r ? (c.y = b.HEIGHT - c.r, c.moveY = -c.moveY) : c.y < c.r && (c.y = c.r, c.moveY = -c.moveY)) : "through" == b.mode && (c.x > b.WIDTH ? c.x = 0 : c.x < 0 && (c.x = b.WIDTH), c.y > b.HEIGHT ? c.y = 0 : c.y < 0 && (c.y = b.HEIGHT))
				}
				b.draw()
			}, 1e3 / b.FPS)
		},
		line: function(a, b, c, d, e) {
			this.beginX = a, this.beginY = b, this.closeX = c, this.closeY = d, this.o = e
		},
		circle: function(a, b, c, d, e) {
			this.x = a, this.y = b, this.r = c, this.moveX = d, this.moveY = e
		},
		num: function(a, b) {
			var c = arguments[1] || 0;
			return Math.floor(Math.random() * (a - c + 1) + c)
		},
		drawCircle: function(a, b, c, d, e, f) {
			var g = this,
				h = new g.circle(b, c, d, e, f);
			return a.beginPath(), a.arc(h.x, h.y, h.r, 0, 2 * Math.PI), a.closePath(), a.fill(), h
		},
		drawLine: function(a, b, c, d, e, f) {
			var g = this,
				h = new g.line(b, c, d, e, f);
			a.beginPath(), a.strokeStyle = "rgba(0,0,0," + f + ")", a.moveTo(h.beginX, h.beginY), a.lineTo(h.closeX, h.closeY), a.closePath(), a.stroke()
		},
		init: function() {
			var a = this;
			a.circleArr = [];
			for (var b = 0; b < a.POINT; b++) a.circleArr.push(a.drawCircle(a.context, a.num(a.WIDTH), a.num(a.HEIGHT), a.num(10, 2), a.num(10, -10) / 40, a.num(10, -10) / 40))
		},
		draw: function() {
			var a = this;
			a.context.clearRect(0, 0, a.canvas.width, a.canvas.height);
			for (var b = 0; b < a.POINT; b++) a.drawCircle(a.context, a.circleArr[b].x, a.circleArr[b].y, a.circleArr[b].r);
			for (b = 0; b < a.POINT; b++)
				for (var c = 0; c < a.POINT; c++)
					if (b + c < a.POINT) {
						var d = Math.abs(a.circleArr[b + c].x - a.circleArr[b].x),
							e = Math.abs(a.circleArr[b + c].y - a.circleArr[b].y),
							f = Math.sqrt(d * d + e * e),
							g = 1 / f * 7 - .009,
							h = g > .03 ? .03 : g;
						h > 0 && a.drawLine(a.context, a.circleArr[b].x, a.circleArr[b].y, a.circleArr[b + c].x, a.circleArr[b + c].y, h)
					}
		}
	};
	a.loiter = b
}(loiter);
export default loiter;